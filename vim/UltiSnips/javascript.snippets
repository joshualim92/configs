extends html
extends css

snippet log "console.log();"
console.log(${VISUAL}$0);
endsnippet

snippet hmf "console.log(here mf:);"
console.log(${2:"}here mofo $1$2, ${1:${VISUAL}}$0);
endsnippet

snippet carw "ES6 arrow function to const"
const $1 = ($2)${3:: $4} => {
	${VISUAL}$0
};
endsnippet

snippet arw "ES6 arrow function inline"
($1)${2:: $3} => {$0}
endsnippet

snippet creq "const require()" b
const $1 = require($3${2:$1});
endsnippet

snippet constr "constructor()" b
constructor(${1:props}) {
	${2:super($1);}$0
}
endsnippet

# Mocha
snippet des "describe(thing, () => { ... })" b
describe(${1:}, () => {
	${0:${VISUAL}}
});
endsnippet

snippet it "it(should do, () => { ... })" b
it(${1:}, ${2:async }(${3:done}) => {
	${0:${VISUAL}}
});
endsnippet

snippet bef "before(() => { ... })" b
before(() => {
	${1:${VISUAL}}
});
$0
endsnippet

snippet befe "beforeEach(() => { ... })" b
beforeEach(() => {
	${1:${VISUAL}}
});
$0
endsnippet

snippet aft "after(() => { ... })" b
after(() => {
	${1:${VISUAL}}
});
$0
endsnippet

snippet afte "afterEach(() => { ... })" b
afterEach(() => {
	${1:${VISUAL}}
});
$0
endsnippet

snippet ut "underTest"
underTest$1($0);
endsnippet

snippet st "sinon stub" b
sinon.stub($1, $2);$0
endsnippet

snippet re "sinon .restore()" b
$1.$2.restore();$0
endsnippet

snippet prom "new Promise((resolve, reject)) => {}"
new Promise((resolve, reject)) => {$0});
endsnippet

snippet proptypes "React PropTypes" b
$1.propTypes = {
    $0
};
endsnippet

snippet rifm "react-intl <FormattedMessage />" i
<FormattedMessage {$1} ${2:values={{ $3 }}} />
endsnippet

snippet act "React Redux Action Creator" b
${2:export }const $1 = ($4) => ({
    ${3:payload: $4,}
	type: $5,
});
endsnippet

snippet thu "React Redux Thunk Action Creator" b
${2:export }const $1 = () => ${3:async }(dispatch, getState, { $4 }) => {
	$0
};
endsnippet

snippet eslint-dnl "// eslint-disable-next-line" b
// eslint-disable-next-line $0
endsnippet

snippet sn "styleName="
styleName="$1"
endsnippet

global !p
from vimsnippets import get_comment_format
endglobal
snippet todo "TODO comment" bw
`!p snip.rv=get_comment_format()[0]` ${2:TODO}: $0${3: <${4:`!v strftime('%d-%m-%y')`}${5:, `!v g:snips_author`}>} `!p snip.rv=get_comment_format()[2]`
endsnippet
